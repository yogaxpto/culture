rules:
# Disallow print statements
- id: python.custom-credit-group.no-prints
  message: Do not use print statements.
  languages: [python]
  severity: INFO
  pattern: print(...)

# Disallow redefining a loop variable inside the loop
- id: python.custom-credit-group.no-redefinition-inside-loop
  message: Do not redefine loop variables inside the loop.
  languages: [python]
  severity: WARNING
  patterns:
    - pattern-inside: |
        for $I in $L:
            ...
    - pattern: $I = ...

# Disallow making changes to an iterable while iterating it
- id: python.custom-credit-group.no-iterable-updates-inside-loop
  message: Do not update/change an iterable while iterating it.
  languages: [python]
  severity: ERROR
  patterns:
    - pattern-inside: |
        for $I in $L:
            ...
    - pattern: $L[...] = ...

# Disallow usage of the `requests` library
- id: python.custom-credit-group.no-requests-library
  message: Do not use the `requests` library. Use `RequestClient` instead.
  languages: [python]
  severity: ERROR
  patterns:
  - pattern: requests.$METHOD(...)

# Enforce setting `related_name` in Foreign Keys and Many2Many relations
# TODO: would be awesome to be able to enforce the correct format too!
- id: python.custom-credit-group.foreign-key-and-many2many-must-set-related-name
  message: ForeignKey and ManyToMany relationships must explicitly set the "related_name" property as
    "<model>_<field>_set".
  languages: [python]
  severity: ERROR
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern-either:
      - pattern: $F = django.db.models.ForeignKey(...)
      - pattern: $F = django.db.models.ManyToManyField(...)
  - pattern-not: $F = django.db.models.ForeignKey(..., related_name=..., ...)
  - pattern-not: $F = django.db.models.ManyToManyField(..., related_name=..., ...)


# Replaces python.lang.best-practice.unspecified-open-encoding.unspecified-open-encoding to allow variables instead of only strings in the encoding field
- id: python.custom-credit-group.unspecified-open-encoding
  message: Missing 'encoding' parameter. 'open()' uses device locale encodings by
    default, corrupting files with special characters. Specify the encoding to ensure
    cross-platform support when opening files in text mode (e.g. encoding="utf-8").
  languages: [python]
  severity: WARNING
  patterns:
  - pattern-inside: open(...)
  - pattern-not: open(..., encoding=..., ...)
  - pattern-not: open($F, "...", $B, "...", ...)
  - pattern-either:
    - pattern: open($FILE)
    - patterns:
      - pattern: open($FILE, ...)
      - pattern-not: open($FILE, $M, ...)
      - pattern-not-regex: open\(.*(?:encoding|mode)=.*\)
    - patterns:
      - pattern: open($FILE, $MODE, ...)
      - metavariable-regex:
          metavariable: $MODE
          regex: (?!.*b.*)
    - patterns:
      - pattern: open($FILE, ..., mode=$MODE, ...)
      - metavariable-regex:
          metavariable: $MODE
          regex: (?!.*b.*)
  
# Disallow charfield with choices
- id: python.custom-credit-group.disallow-charfield-choices
  message: CharField should not be used with choices. Use IntegerField instead.
  languages: [python]
  severity: WARNING
  patterns:
  - pattern-inside: |
      class $M(...):
        ...
  - pattern-either:
    - pattern: rest_framework.fields.CharField(..., choices=..., ...)
    - pattern: rest_framework.serializers.CharField(..., choices=..., ...)

# Disallow multiple assignments on one line
- id: python.custom-credit-group.disallow-multiple-assignments
  message: Multiple assignments are not allowed
  languages: [python]
  severity: WARNING
  patterns:
  - pattern: $A = $B = $C
  - pattern-not-regex: (.+),(.+)=(.+)
  - metavariable-regex:
      metavariable: $A
      regex: ^[A-Za-z0-9_]+$
  - metavariable-regex:
      metavariable: $B
      regex: ^[A-Za-z0-9_]+$

# Disallow use of logging. Use Django REST logger instead.
- id: python.custom-credit-group.use-django-rest-logger
  message: Discontinue use of inbuilt logging. Use Django REST Logger instead.
  languages: [python]
  severity: ERROR
  patterns:
  - pattern: import logging

# Disallow use of cleaned_data.get('field_name') method.
- id: python.custom-credit-group.disallow-cleaned_data.get
  message: Access cleaned field explicitly using ['field'].
  languages: [python]
  severity: ERROR
  patterns:
  - pattern-inside: |
      def $FUNC(...):
        ...
  - pattern-either:
    - pattern: cleaned_data.get(...)
    - pattern: $PREFIX.cleaned_data.get(...)
  
# Disallow src prefix in import path.
- id: python.custom-credit-group.disallow-src-import-prefix
  message: Remove .src from import path.
  languages: [python]
  severity: ERROR
  pattern: import src

# Disallow callings model save without setting update_fields.
- id: python.custom-credit-group.set-update-fields
  message: Set update fields in model save method. Example object.save(update_fields=['updated_field1', 'updated_field2'])
  languages: [python]
  severity: ERROR
  patterns:
    - pattern: $MODEL.save(...)
    - pattern-not: $MODEL.save(..., update_fields=..., ...)
